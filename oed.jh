entity Administrator {
    firstName String required
    lastName String required
    emailAddress String required
    birthDate LocalDate
	role Role
    password String required
    status AdministratorStatus
    adminFunction String
    phone String
    mobilePhone String
    description String
    universignAdmin Boolean
    activationKey String
    resetKey String
    resetDate Instant
}

relationship OneToOne {
	Administrator{permissions} to AdminPermissions
}

relationship OneToOne {
	Administrator{dashboardPreferences} to AdminPreferences
}

relationship OneToOne {
	Administrator{oedPreferences} to AdminPreferences
}

entity AdminPermissions {
	oedWrite Boolean
	groupWrite Boolean
	adminWrite Boolean
}


entity AdminPreferences {
	filter String
}

relationship OneToMany {
	AdminPreferences{columns} to Column
}
entity Column {
    show Boolean
    name String
	type String
}


enum Role {
    SUPER_ADMIN, GROUP_ADMIN, AFFILIATED_ADMIN, GUEST
}

enum AdministratorStatus {
    REGISTERING, ACTIVE, DEACTIVATED
}


entity CertifiedUser {
	firstname String
	lastname String
	email String
	phoneNumber String
}

entity ErrorRequest {
	comment String
    firstName String required
    lastName String required
    emailAddress String required
    birthDate LocalDate
}

entity Group {
	name String required
    universignOrganizationId String
    status GroupStatus
    activateAdvanced Boolean
    universignOrganizationProfil String
    createdAt Instant
    lastUpdatedAt Instant
}

relationship OneToOne {
	Group{permissions} to GroupPermission
}

relationship OneToOne {
	Group{groupConfiguration} to GroupConfiguration
}

relationship OneToOne {
	Group{parent} to Group
}

relationship OneToMany {
	Group{administrators} to Link
}

relationship OneToMany {
	Group{operators} to Link
}

relationship OneToMany {
	Group{affiliatedGroups} to Link
}

entity Link {
}

enum GroupStatus {
    REGISTERING, ACTIVE
}


entity HeaderConfiguration {
	logo String
    width Integer
    href String
}
entity Properties {

}

entity GroupConfiguration {

}

relationship OneToOne {
	GroupConfiguration{header} to HeaderConfiguration
}
relationship OneToOne {
	GroupConfiguration{i18n} to Properties
}
relationship OneToOne {
	GroupConfiguration{metaDatas} to Properties
}
relationship OneToOne {
	GroupConfiguration{languages} to MapProperties
}


entity GroupPermission {
	moveOperatorsToUniversignOrganization Boolean
    allowCustomization Boolean
    allowAffiliatedGroup Boolean
    allowAffiliatedCustomization Boolean
}

entity MapProperties {
	dummy String
}

entity Operator {
	status OpearatorStatus required
    phoneNumber String
    invitationDate LocalDate
    invitationUrl String
    updateAccessDate Boolean
    accessDate LocalDate
    updateTrainingDate Boolean
    trainingDate LocalDate
    hasSucceededMCQ Boolean
    updateQCMDate Boolean
    mcqDate LocalDate
    trainingSessionId String
    trainingSessionURL String
    sessionId String
    language String
    groupId String
    groupName String
    
    signatureStatus SignatureStatus
    isOED Boolean
    signatureSessionId String
    signatureSessionURL String
    universignStatus UniversignStatus
    certified Boolean
    qualified Boolean
	previousFinalUniversignStatus SignatureStatus
    
     firstName String
     lastName String
     emailAddress String
     birthDate LocalDate
}

entity CertifiedUser {
	firstname String
	lastname String
	email String
	phoneNumber String
}

relationship OneToOne {
	Operator{certifiedUser} to CertifiedUser
}

enum UniversignStatus {
    STATUS_INACTIVE, STATUS_ACTIVE, STATUS_DELETED, STATUS_ON_HOLD, STATUS_RA_ACTIVE, STATUS_USER_INEXISTENT, UNKNOWN
}

enum SignatureStatus {
    READY, EXPIRED, COMPLETED, CANCELED, FAILED, PENDING, UNKNOWN
}

relationship OneToOne {
	Operator{metaDatas} to MapProperties
}



enum OpearatorStatus {
	CREATED, VALIDATED
}

entity CheckResult {
	checkErrorMessage String
    status Status
    result CheckStatus 
}

enum Status {
    UPDATE, INSERT, ERROR
}

enum CheckStatus {
    PERFECT, 
    EMAIL_AND_PHONE_IN_OTHER_ORGANISATION, 
    EMAIL_FOUND, EMAIL_FOUND_BUT_PHONE_USED, 
    EMAIL_FOUND_IN_OTHER_ORGANIZATION, 
    EMAIL_FOUND_IN_OTHER_ORGANIZATION_BUT_PHONE_USED,
    PHONE_FOUND,
    PHONE_FOUND_IN_OTHER_ORGANIZATION,
    NOT_FOUND,
    EMAIL_INVALID,
    PHONE_INVALID
}

// Set pagination options
paginate all with pagination

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set an angular suffix
// angularSuffix * with mySuffix
